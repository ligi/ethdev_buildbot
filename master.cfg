# -*- python -*-
# ex: set filetype=python:

import os
import re
from buildbot.plugins import *

c = BuildmasterConfig = {}

repo = open("/config/repo").read()
ip = open("/config/hostip").read() # we cannot use $BUILDMASTER inside a docker container

c['title'] = "ETHDev CI"
c['titleURL'] = "https://ethereum.org/"
c['buildbotURL'] = open("/config/url").read()

c['www'] = dict(port=80,
                plugins=dict(console_view={}, grid_view={}))

c['secretsProviders'] = [secrets.SecretInAFile(dirname="/config/secrets")]

env = { 'CI': 'true',
        'ETH_BUILDBOT': 'true',
        'BUILD_REPO': re.sub(".git$","",repo.replace("https://github.com/","")),
        'BUILD_IS_PR': 'false',
        'BUILD_IS_CRON': 'false',
        'BUILD_NUMBER': util.Interpolate('%(prop:buildnumber)s'),
        'BUILD_BRANCH': util.Property('branch'),
        'BUILD_COMMIT': util.Property('revision'),
}

dockerfile = """
FROM golang:1.18

RUN apt-get update && apt-get install -y python-dev python3-pip
RUN pip install buildbot-worker

RUN groupadd -r buildbot && useradd -m -r -g buildbot buildbot
RUN mkdir /worker && chown buildbot:buildbot /worker

WORKDIR /worker
CMD buildbot-worker create-worker . $MASTERIP $WORKERNAME $WORKERPASS ;\
  echo berlin-server+buildbot@ethereum.org > info/admin ;\
  echo $HOST > info/host ;\
  buildbot-worker start --nodaemon .
"""

c['workers'] = [
   worker.DockerLatentWorker('x86-worker',
                             password = None, # will be autogenerated
                             docker_host='ssh://builder@10.10.5.4',
                             image='buildbot_worker_x86_img_1.18_v2',
                             dockerfile=dockerfile.replace("$HOST","X86 worker").replace("$MASTERIP",ip)),
   worker.DockerLatentWorker('arm-worker',
                             password = None, # will be autogenerated
                             docker_host='ssh://builder@10.10.5.7',
                             image='buildbot_worker_arm_img_1.18_v2',
                             dockerfile=dockerfile.replace("$HOST","ARM worker").replace("$MASTERIP",ip)),
   worker.Worker('win-worker', util.Secret("workers")),
   worker.Worker("osx-worker", util.Secret("workers"))
]

c['protocols'] = {'pb': {'port': 9989}}

def refspecIsBranchOrTag(ref):
  return ref.startswith('refs/tags/') or ref.startswith('refs/heads/')

c['change_source'] = [
  changes.GitPoller(repo,
                    workdir='test-workdir',
                    branches=refspecIsBranchOrTag,
                    pollInterval=30,
                    # This setting makes it so a change event is generated
                    # when a git tag or branch is re-pushed.
                    buildPushesWithNoCommits=True)
]

lintFactory = util.BuildFactory()
lintFactory.addStep(steps.Git(repourl=repo, mode='incremental'))
lintFactory.addStep(steps.ShellCommand(name="lint",command=["go", "run", "build/ci.go","lint"]))

testFactory = util.BuildFactory()
testFactory.addStep(steps.Git(repourl=repo, mode='incremental',submodules=True))
testFactory.addStep(steps.ShellCommand(name="test",command=["go", "run", "build/ci.go", "test", "-coverage"]))

buildFactory = util.BuildFactory()
buildFactory.addStep(steps.Git(repourl=repo, mode='incremental'))
buildFactory.addStep(steps.ShellCommand(name="install",command=["go", "run", "build/ci.go", "install", "-dlgo"]))

# this creates a deterministic build worker directory based on the git commit, etc.
def randomWorkDirectory(source_stamps):
    return os.urandom(16).hex()

c['builders'] = []

defaultBuilders = []

for builder in [("lint",lintFactory), ("test",testFactory), ("build",buildFactory)]:
    c['builders'].append(util.BuilderConfig(name=builder[0]+"(x86)",workernames=["x86-worker"],factory=builder[1],tags=[builder[0],"x86"]))
    c['builders'].append(util.BuilderConfig(name=builder[0]+"(win)",workernames=["win-worker"],factory=builder[1],tags=[builder[0],"windows"]))
    c['builders'].append(util.BuilderConfig(name=builder[0]+"(arm)",workernames=["arm-worker"],factory=builder[1],env={'GOARM':'7'},tags=[builder[0],"arm"]))
    defaultBuilders += [builder[0]+"(x86)", builder[0]+"(arm)", builder[0]+"(win)"]

# --------------------------------------------------------------------------------
# -- RACE TESTS --

raceFactory = util.BuildFactory()
raceFactory.addStep(steps.Git(repourl=repo, mode='incremental',submodules=True))
raceFactory.addStep(steps.ShellCommand(name="test race(",command=["go", "run", "build/ci.go","test","-race","-coverage"]))

c['builders'].append(util.BuilderConfig(name="race test(x86)",workernames=["x86-worker"],factory=raceFactory,tags=["x86"]))

# --------------------------------------------------------------------------------
# -- MAC BUILD --

macBuildFactory = util.BuildFactory()
macBuildFactory.addSteps([
    steps.Git(
        repourl=repo,

        # Shallow clone.
        shallow=1,

        # Submodules are not required to create archives.
        submodules=False,

        # These settings ensure that the build directory will be cleaned
        # before the build is restarted.
        mode='full', method='clobber',
    ),

    steps.ShellCommand(
        name="macos-build.sh",
        command=["bash", "build/bot/macos-build.sh"],
        maxTime=45*60,
    ),
])

c['builders'].append(util.BuilderConfig(
    name="build (osx)", workernames=["osx-worker"], factory=macBuildFactory, tags=["build", "osx"],
))

defaultBuilders += ["build (osx)"]

# --------------------------------------------------------------------------------
# -- PPA UPLOAD --

ppaSecretEnvironment = {
  "PPA_SIGNING_KEY": util.Interpolate("%(secret:geth_ppa_asc)"),
}

ppaEnvironment = {
  *env,
  *ppaSecretEnvironment,
}

ppaBuild = util.BuildFactory()
ppaBuild.addSteps([
    steps.Git(
        repourl=repo,

        # Use shallow clone.
        shallow=1,
        submodules=False,
        mode='full', method='clobber',
    ),

    steps.ShellCommand(
        name="ppa-build.sh",
        command=["bash", "build/bot/ppa-build.sh"],
        maxTime=20*60,
        env=ppaEnvironment,
    ),
])

c['builders'].append(util.BuilderConfig(
    name="ppa (x86)", workernames=["x86-worker"], factory=ppaBuild, tags=["build", "ppa"],
))

defaultBuilders += ["ppa (x86)"]

# --------------------------------------------------------------------------------
# -- SCHEDULER --

def shouldBuildBranch(b):
  print('branch in change filter: ' + b)
  if b.startswith('refs/tags/'):
    return True
  return b in ['master', 'buildbot-testing']

c['schedulers'] = [
  schedulers.AnyBranchScheduler(name="default via push",
                                change_filter=util.ChangeFilter(branch_fn=shouldBuildBranch),
                                treeStableTimer=None,
                                builderNames=defaultBuilders),
  schedulers.ForceScheduler(name="force",builderNames=defaultBuilders+["race test(x86)"]),
  schedulers.Periodic(name="daily race test", builderNames=["race test(x86)"],
                              periodicBuildTimer=24*60*60)
]

c['services'] = []
c['db'] = { 'db_url' : "sqlite:///state.sqlite" }
